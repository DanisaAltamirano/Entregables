# -*- coding: utf-8 -*-
"""Entregable.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15EqCJHpFLkkfD7Zs3Omj3gBz-a2CD4Yy
"""

import requests
import pandas as pd

url = "https://api.frankfurter.app/latest"

# Realizar la solicitud GET
response = requests.get(url)

# Verificar si la solicitud fue exitosa (código de estado 200)
if response.status_code == 200:
    # Convertir los datos JSON a un DataFrame de pandas
    data = response.json()
    rates_data = data.get("rates", {})

    # Crear un DataFrame con una sola fila usando el índice "base"
    df = pd.DataFrame([rates_data], index=[data["base"]])

    # Transponer el DataFrame para tener monedas como columnas
    df = df.T.reset_index()
    df.columns = ["Currency", "Exchange Rate"]

    # Imprimir el DataFrame
    print(df)
else:
    print(f"Error en la solicitud. Código de estado: {response.status_code}")

url = "https://api.frankfurter.app/latest"

# Realizar la solicitud GET
response = requests.get(url)

# Verificar si la solicitud fue exitosa (código de estado 200)
if response.status_code == 200:
    # Convertir los datos JSON a un DataFrame de pandas
    data = response.json()
    rates_data = data.get("rates", {})

    # Crear un DataFrame con una sola fila usando el índice "base"
    df = pd.DataFrame([rates_data], index=[data["base"]])

    # Transponer el DataFrame para tener monedas como columnas
    df = df.T.reset_index()
    df.columns = ["Currency", "Exchange Rate"]

    # Mostrar la fecha de la última actualización
    last_updated = pd.to_datetime(data["date"])
    print(f"Fecha de última actualización: {last_updated}")

    # Imprimir el DataFrame
    print(df)
else:
    print(f"Error en la solicitud. Código de estado: {response.status_code}")

# Realizar la solicitud GET
response = requests.get(url)

# Verificar si la solicitud fue exitosa (código de estado 200)
if response.status_code == 200:
    # Convertir los datos JSON a un DataFrame de pandas
    data = response.json()
    rates_data = data.get("rates", {})

    # Crear un DataFrame con una sola fila usando el índice "base"
    df = pd.DataFrame([rates_data], index=[data["base"]])

    # Agregar una columna con la fecha de última actualización
    df["Last Updated"] = pd.to_datetime(data["date"])

    # Transponer el DataFrame para tener monedas como columnas
    df = df.T.reset_index()

    # Renombrar las columnas después de la transposición
    df.columns = ["Currency", "Exchange Rate"]

    # Agregar la columna de fecha al final del DataFrame
    df["Last Updated"] = pd.to_datetime(data["date"])

    # Filtrar por un periodo específico (ejemplo: últimos 7 días)
    start_date = pd.to_datetime('today') - pd.DateOffset(days=10)
    filtered_df = df[df["Last Updated"] >= start_date]

    # Agregar una columna de ID incremental
    df["ID"] = range(1, len(df) + 1)

     # Eliminar la última fila que contiene información sobre la última actualización
    df = df.iloc[:-1]

    # Reorganizar el orden de las columnas
    df = df[["ID", "Currency", "Exchange Rate", "Last Updated"]]

    # Imprimir el DataFrame
    print(df)
else:
    print(f"Error en la solicitud. Código de estado: {response.status_code}")